# web / build . -> will look for the Dockerfile to run the build,
# but since we do not have the Dockerfile, we have the Dockerfile.dev
# we need to replace "build: ." with the sintax below

# docker-compose build = docker build .
#    The one only builds the images, does not start the container.
# docker-compose up -d = docker run -d myimage
#    This one builds the images if the images do not exist and starts the containers.
#    If the Dockerfile is changed, the images are NOT reconstructured.
# docker-compose up --build = docker build . & docker run myimage
#    This one forces the build even when not needed.
# docker-compose up --no-build
#    This one skips the image build process
# docker-compose down = docker stop and remove all containers created
# docker-compose stop = docker stop services
# docker-compose ps ~= docker ps
#    For the docker-compose.yml in the folder where the file exists

# restart policies per service/container
# "no" - never attempt to restart if container stops or crashes
#        has to be specified with quotes as 'no' because no is interpreted as boolean FALSE
# always - for any reason, attemp to restart
# on-failure - only restart if container stops with an error code
#              if 0 is passed, it will not be restart cause 0 is fine
#              0 - exited and everything is OK
#              1, 2, 3 etc - exited because something went wrong
# unless-stopped - restart unless we forcibly stop it

# In the volumes, when you do not specify the :, you are putting a bookmark and saying
# to do not replace that volume inside the container.
# The .:/app says to replace the current directory into /app directory inside the container.

# We could to execute the tests not as a service/container and in fact with 
# "docker exec -it <CONTAINER_ID> npm run test" so in that way, we could manipulate the
# test suite because we would attach our terminal to the test suite.
# As a service, we cannot attach to that process because npm is the default command,
# so the npm starts other process to run the test and the "docker attach <CONTAINER_ID>""
# would be able to attach the terminal to npm process only, not to the test suite

version: '3'
services: 
  web:
    build: 
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - /app/node_modules
      - .:/app
  tests:
    build: 
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - /app/node_modules
      - .:/app
    command: ["npm", "run", "test"]